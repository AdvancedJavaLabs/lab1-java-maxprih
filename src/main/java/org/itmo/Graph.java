package org.itmo;

import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicIntegerArray;

class Graph {
    private final int V;
    private final ArrayList<Integer>[] adjList;

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    void parallelBFS(int startVertex) {
        AtomicIntegerArray visited = new AtomicIntegerArray(V);

        List<Integer> currentFrontier = new ArrayList<>();
        currentFrontier.add(startVertex);
        visited.set(startVertex, 1);

        int numThreads = Runtime.getRuntime().availableProcessors();
        ExecutorService executor = Executors.newFixedThreadPool(numThreads);

        try {
            while (!currentFrontier.isEmpty()) {
                final List<Integer> frontier = currentFrontier;
                final int frontierSize = frontier.size();

                List<List<Integer>> threadLocalBuffers = new ArrayList<>(numThreads);
                for (int t = 0; t < numThreads; t++) {
                    threadLocalBuffers.add(new ArrayList<>());
                }

                int chunkSize = Math.max(1, (frontierSize + numThreads - 1) / numThreads);
                CountDownLatch latch = new CountDownLatch(numThreads);

                for (int threadId = 0; threadId < numThreads; threadId++) {
                    final int start = threadId * chunkSize;
                    final int end = Math.min(start + chunkSize, frontierSize);
                    final List<Integer> localBuffer = threadLocalBuffers.get(threadId);

                    if (start >= frontierSize) {
                        latch.countDown();
                        continue;
                    }

                    executor.execute(() -> {
                        try {
                            for (int i = start; i < end; i++) {
                                int vertex = frontier.get(i);

                                for (int neighbor : adjList[vertex]) {
                                    if (visited.compareAndSet(neighbor, 0, 1)) {
                                        localBuffer.add(neighbor);
                                    }
                                }
                            }
                        } finally {
                            latch.countDown();
                        }
                    });
                }

                try {
                    latch.await();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("BFS interrupted", e);
                }

                List<Integer> nextFrontier = new ArrayList<>();
                for (List<Integer> buffer : threadLocalBuffers) {
                    nextFrontier.addAll(buffer);
                }

                currentFrontier = nextFrontier;
            }
        } finally {
            executor.shutdown();
            try {
                if (!executor.awaitTermination(60, TimeUnit.SECONDS)) {
                    executor.shutdownNow();
                }
            } catch (InterruptedException e) {
                executor.shutdownNow();
                Thread.currentThread().interrupt();
            }
        }
    }

    //Generated by ChatGPT
    void bfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

}
